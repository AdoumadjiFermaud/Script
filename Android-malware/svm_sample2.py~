#!/usr/bin/env python3
#!cording:utf-8

from sklearn.datasets import fetch_mldata
from sklearn.svm import SVC
from sklearn.model_selection  import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np
import glob
import json

# change False to disable loading log
debug = False

#===============================================================================
# functions
#===============================================================================

def fetch_value(dic, key):
    if key in dic:
        return dic[key]
    return None

def load_data(dir):
    details = []
    permissions = []
    data = []
    labels = []

    # load data from json
    for file in glob.glob(dir + '/*'):
        json_text = open(file, 'r')
        info = json.load(json_text)
        details.append(info)

    # collect permissions
    for detail in details:
        used_permissions = fetch_value(detail, 'used_permissions')
        if used_permissions == None:
            used_permissions = []
        for permission in used_permissions:
            permissions.append(permission[0])
    permissions = list(set(permissions)) # uniq!
    permissions.sort()
#    print(permissions)

    # generate data
    for detail in details:
        permission_bits = []
        used_permissions = []

        # make permission bit sequence
        used_permission_details = fetch_value(detail, 'used_permissions')
        if used_permission_details == None:
            used_permission_details = []
        for used_permission_detail in used_permission_details:
            used_permissions.append(used_permission_detail[0])
        used_permissions = list(set(used_permissions)) # uniq!
        for permission in permissions:
            b = 0
            if permission in used_permissions:
                b = 1
            permission_bits.append(b)

        if debug:
            print(used_permissions)
            print(permission_bits)
        data.append(permission_bits)
        labels.append(int(fetch_value(detail, 'is_malware')))

    return data, labels

#===============================================================================
# learning
#===============================================================================

# load data from json
data, labels = load_data(dir='data')
data = np.array(data)

# split data for train and test
features_train, features_test, labels_train, labels_test = train_test_split(data, labels, test_size=0.8)

print("train data num: ", len(features_train))
print("test data num: ", len(features_test))

cls = SVC(kernel='rbf', gamma='auto')
cls.fit(features_train, labels_train)
pred = cls.predict(features_test)
score = accuracy_score(pred, labels_test)
print(score)
