import numpy as np
import chainer
from chainer import cuda, Function, gradient_check, report, training, utils, Variable
from chainer import datasets, iterators, optimizers, serializers
from chainer import Link, Chain, ChainList
import chainer.functions as F
import chainer.links as L
from chainer.training import extensions
from sklearn.cross_validation import train_test_split
import glob
import json

debug = False

#===============================================================================
# model
#===============================================================================

class AndroMalNet(Chain):
  def __init__(self):
    super(AndroMalNet, self).__init__()
    with self.init_scope():
      self.fc1 = L.Linear(60, 128)
      self.fc2 = L.Linear(128, 128)
      self.fc3 = L.Linear(128, 2)

  def __call__(self, x, t):
    # step functions: F.sigmoid, F.relu, F.leaky_relu, etc...
    # other functions: F.dropout
    h = F.relu(self.fc1(x))
    h = F.dropout(F.relu(self.fc2(h)))
    h = self.fc3(h)
    if chainer.config.train:
        return F.softmax_cross_entropy(h, t), F.accuracy(h, t), F.classification_summary(h, t, beta=1.0)
    return F.accuracy(h, t), F.classification_summary(h, t, beta=1.0)


#===============================================================================
# functions
#===============================================================================

def fetch_value(dic, key):
    if key in dic:
        return dic[key]
    return None

def load_data(dir):
    details = []
    permissions = []
    data = []
    labels = []

    # load data from json
    for file in glob.glob(dir + '/*'):
        json_text = open(file, 'r')
        info = json.load(json_text)
        details.append(info)

    # load permissions
    permissions = ['android.permission.ACCESS_BLUETOOTH_SHARE', 'android.permission.ACCESS_COARSE_LOCATION', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.ACCESS_MOCK_LOCATION', 'android.permission.ACCESS_NETWORK_STATE', 'android.permission.ACCESS_WIFI_STATE', 'android.permission.AUTHENTICATE_ACCOUNTS', 'android.permission.BATTERY_STATS', 'android.permission.BIND_ACCESSIBILITY_SERVICE', 'android.permission.BIND_DEVICE_ADMIN', 'android.permission.BLUETOOTH', 'android.permission.BLUETOOTH_ADMIN', 'android.permission.BROADCAST_STICKY', 'android.permission.BROADCAST_WAP_PUSH', 'android.permission.CALL_PHONE', 'android.permission.CALL_PRIVILEGED', 'android.permission.CAMERA', 'android.permission.CHANGE_NETWORK_STATE', 'android.permission.CHANGE_WIFI_MULTICAST_STATE', 'android.permission.CHANGE_WIFI_STATE', 'android.permission.DISABLE_KEYGUARD', 'android.permission.GET_ACCOUNTS', 'android.permission.GET_PACKAGE_SIZE', 'android.permission.GET_TASKS', 'android.permission.INTERNET', 'android.permission.MANAGE_ACCOUNTS', 'android.permission.MODIFY_AUDIO_SETTINGS', 'android.permission.MOUNT_UNMOUNT_FILESYSTEMS', 'android.permission.NFC', 'android.permission.PROCESS_OUTGOING_CALLS', 'android.permission.READ_CALL_LOG', 'android.permission.READ_CELL_BROADCASTS', 'android.permission.READ_CONTACTS', 'android.permission.READ_EXTERNAL_STORAGE', 'android.permission.READ_PHONE_STATE', 'android.permission.READ_SMS', 'android.permission.READ_SYNC_SETTINGS', 'android.permission.READ_SYNC_STATS', 'android.permission.RECEIVE_BOOT_COMPLETED', 'android.permission.RECEIVE_SMS', 'android.permission.RECORD_AUDIO', 'android.permission.REORDER_TASKS', 'android.permission.RESTART_PACKAGES', 'android.permission.SEND_SMS', 'android.permission.SET_WALLPAPER', 'android.permission.SET_WALLPAPER_HINTS', 'android.permission.VIBRATE', 'android.permission.WAKE_LOCK', 'android.permission.WRITE_CALENDAR', 'android.permission.WRITE_SETTINGS', 'android.permission.WRITE_SYNC_SETTINGS', 'android.permission.WRITE_USER_DICTIONARY', 'com.android.alarm.permission.SET_ALARM', 'com.android.browser.permission.READ_HISTORY_BOOKMARKS', 'com.android.email.permission.ACCESS_PROVIDER', 'com.android.email.permission.READ_ATTACHMENT', 'com.android.launcher.permission.INSTALL_SHORTCUT', 'com.android.launcher.permission.UNINSTALL_SHORTCUT', 'com.android.launcher.permission.WRITE_SETTINGS', 'com.android.voicemail.permission.ADD_VOICEMAIL']

    # generate data
    for detail in details:
        permission_bits = []
        used_permissions = []

        # make permission bit sequence
        used_permission_details = fetch_value(detail, 'used_permissions')
        if used_permission_details == None:
            used_permission_details = []
        for used_permission_detail in used_permission_details:
            used_permissions.append(used_permission_detail[0])
        used_permissions = list(set(used_permissions)) # uniq!
        for permission in permissions:
            b = 0
            if permission in used_permissions:
                b = 1
            permission_bits.append(b)

        data.append(permission_bits)
        is_malware = int(fetch_value(detail, 'is_malware'))
        # 0: malware, 1: not malware
        if is_malware == 1:
            labels.append(0)
        else:
            labels.append(1)

    data = np.array(data, dtype=np.float32)
    labels = np.array(labels, dtype=np.int32)
    return data, labels


#===============================================================================
# main program
#===============================================================================

model = AndroMalNet()
x_data, t_data = load_data(dir='data')
x_train, x_test, t_train, t_test = train_test_split(x_data, t_data, test_size=100)

print("data shape: ", x_data.dtype, x_data.shape)
print("label shape: ", t_data.dtype, t_data.shape)

mal_num = 0
for t in t_data:
    if t == 1:
        mal_num = mal_num + 1
print("mal : not_mal = ", len(x_data) - mal_num, mal_num)

optimizer = optimizers.Adam()
optimizer.setup(model)

# ---- training

x, t = Variable(x_train), Variable(t_train)
with chainer.using_config('train', True):
    for epoch in range(200):
        model.zerograds()
        loss, acc, summary = model(x, t)
        loss.backward()
        optimizer.update()
        print("acc: ", acc.data)

# ---- evaluation

eval_x_data, eval_t_data = load_data(dir='data_eval')
eval_x, eval_t = Variable(eval_x_data), Variable(eval_t_data)

mal_num = 0
for t in eval_t_data:
    if t == 1:
        mal_num = mal_num + 1
print("[eval] mal : not_mal = ", len(eval_x_data) - mal_num, mal_num)

with chainer.using_config('train', False):
    acc, summary = model(eval_x, eval_t)
    precision = summary[0]
    recall = summary[1]
    f_value = summary[2]
    print("eval acc: ", acc.data)
    print("precision: ", precision, "recall: ", recall, "f_value: ", f_value)

