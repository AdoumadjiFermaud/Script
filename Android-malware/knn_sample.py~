from sklearn.datasets import fetch_mldata
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection  import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np
import glob
import json

print("import complete")

# change False to disable loading log
debug = False

#===============================================================================
# functions
#===============================================================================

def fetch_value(dic, key):
    if key in dic:
        return dic[key]
    return None

def load_data(dir):
    data = []
    labels = []
    for file in glob.glob(dir + '/*'):
        json_text = open(file, 'r')
        info = json.load(json_text)

        #-----------------------------------------------------------------------
        # TODO: pick up features!
        used_permissions = fetch_value(info, 'used_permissions')
        if used_permissions == None:
            used_permissions = []
        used_permission_count = len(used_permissions)
        activities = fetch_value(info, 'used_permissions')
        if activities == None:
            activities = []
        activity_count = len(activities)
        services = fetch_value(info, 'services')
        if services == None:
            services = []
        service_count = len(services)

        if debug:
            print(file)
            print("    used_permission count: ", used_permission_count)
            print("    activity count: ", activity_count)
            print("    service count: ", service_count)
        data.append([used_permission_count, activity_count, service_count])

        #-----------------------------------------------------------------------

        labels.append(int(fetch_value(info, 'is_malware')))

    return data, labels

#===============================================================================
# learning
#===============================================================================

# load data from json
data, labels = load_data(dir='data')
data = np.array(data)

# split data for train and test
features_train, features_test, labels_train, labels_test = train_test_split(data, labels, test_size=0.2)

print("train data num: ", len(features_train))
print("test data num: ", len(features_test))

cls = KNeighborsClassifier()
cls.fit(features_train, labels_train)
pred = cls.predict(features_test)
score = accuracy_score(pred, labels_test)
print(score)
